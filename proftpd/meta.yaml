- name: ProFTPD
  title: ProFTPD source distribution server compromised backdoor.
  start_date: 2010-11-28
  end_date: 2010-12-01 # Discovered Dec 1st/2nd
  license: GPL-2.0
  website: http://www.proftpd.org/
  repo: https://github.com/proftpd/proftpd.git
  attribution_type: unknown
  component_type: Application
  lang: C
  cause: Compromise
  motive: Backdoor access
  attack_vector: Server compromise
  transitive: false
  insertion_phase: distribution
  impact_type: Remote code execution, Backdoor
  references:
    - http://proftpd.blogspot.com/2010/12/proftpd-distribution-server-compromised.html # Official Blog
    - https://www.securityfocus.com/news/11442
    - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4221 # Often cited, though describes buffer overflow - backdoor may lack specific CVE
    - https://www.rapid7.com/db/modules/exploit/unix/ftp/proftpd_133c_backdoor/
    - https://www.exploit-db.com/exploits/15662
    - https://threatpost.com/proftpd-server-backdoored-120210/74727/
  versions:
    - "1.3.3c" # Backdoor inserted into this version's distributed tarball
  impacted_hashes: # SHA256 hash of the backdoored tar.bz2, verify before use
    - "34e5be887ac7cd5b073895d91f7161864bde6f1f39103e6778a1c48606fad980"
  synopsis: Main ProFTPD distribution FTP/rsync server compromised, replacing 1.3.3c source tarball. Backdoor allowed unauthenticated remote command execution via HELP command.
  compromise_desc: An unknown attacker compromised the main ProFTPD distribution server (`ftp.proftpd.org`, also `rsync.proftpd.org`) likely exploiting a vulnerability in the running FTP daemon. They replaced the official `proftpd-1.3.3c.tar.bz2` source code archive with a modified version containing a backdoor. This malicious archive was distributed via the main site and synchronized to mirrors between November 28th and December 1st, 2010.
  impact_desc: The injected backdoor code, primarily located in `src/help.c`, created a hidden command handler. An unauthenticated remote attacker could send the command `HELP ACIDBITCHEZ` followed by arbitrary shell commands. The backdoor would then execute these commands using `popen()`, potentially with root privileges if ProFTPD was running as root, giving the attacker remote control over the server.
  example_code: |
    /* Simplified snippet illustrating the backdoor logic added
       to the help command handler in src/help.c */
    static int help_cmd_backdoor(cmd_rec *cmd) {
      // ... original help logic potentially bypassed or augmented ...

      // Added backdoor check for specific HELP argument
      if (cmd->arg != NULL && strcmp(cmd->arg, "ACIDBITCHEZ") == 0) {
        FILE *p = NULL;
        char *cmd_to_run = /* Extract command from subsequent input or fixed buffer */;

        // Attempt to escalate privileges
        setuid(0);
        setgid(0);

        // Execute the command
        p = popen(cmd_to_run, "w");
        if (p != NULL) {
          // Could potentially write output back to user or just close
          pclose(p);
        }

        // Exit to potentially hide traces or terminate connection
        exit(0);
      }

      // ... rest of original help logic ...
      return 1; // Or appropriate return value
    }
